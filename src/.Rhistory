library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.10:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.10:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.10:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.10:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.10:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.10:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
dim(sold_for_gain)
dim(sold_for_gain)[1]
housing_dat[num_data:(num_data + training_size),]
# file:
# Contributers: William Hammond
#               Harry Longwell
# Created: 11/19/2015
# Modified: 11/19/2015
library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.10:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.10:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.10:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.10:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.10:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.10:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
names <- c('ratio_foreclose', 'inventory_measure','price_to_rent','sold_for_gain',
'increasing_in_value', 'pct_price_reduced','median_sold_price' )
housing_dat = as.data.frame(cbind(ratio_foreclose, inventory_measure,price_to_rent,
sold_for_gain,increasing_in_value,pct_price_reduced,median_sold_price))
colnames(housing_dat) <- names
housing_dat[num_data:(num_data + training_size),]
num_data <- dim(median_sold_price)[1]
training_size <- num_data * 0.8
testing_size <= num_data * 0.2
testing_size <= num_data * 0.2
testing_size <- num_data * 0.2
housing_dat[num_data:(num_data + training_size),]
housing_dat
housing_dat[1:training_size,]
housing_dat[training_size:training_size + testing_size,]
housing_dat[training_size:training_size + testing_size,]
housing_dat[training_size:(training_size + testing_size),]
housing_dat[(training_size + 1):(training_size + testing_size),]
train_input <- housing_dat[1:training_size,]
test_input <- housing_dat[(training_size + 1):(training_size + testing_size),]
train_input
train_input
train_input[,1:5]
train_input[,1:6]
train_input[,1:7]
train_input[,1:6]
train_input[,7]
train_input[,1:4]
train_input[,6:]
train_input[,5:]
train_input[,6:7]
train_input[,7:7]
train_input[,7]
# file:
# Contributers: William Hammond
#               Harry Longwell
# Created: 11/19/2015
# Modified: 11/19/2015
library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.10:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.10:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.10:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.10:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.10:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.10:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
names <- c('ratio_foreclose', 'inventory_measure','price_to_rent','sold_for_gain',
'increasing_in_value', 'pct_price_reduced','median_sold_price' )
housing_dat = as.data.frame(cbind(ratio_foreclose, inventory_measure,price_to_rent,
sold_for_gain,increasing_in_value,pct_price_reduced,median_sold_price))
colnames(housing_dat) <- names
# Get the number of data point so we can split training and testing data
num_data <- dim(median_sold_price)[1]
training_size <- num_data * 0.8
testing_size <- num_data * 0.2
train_input <- housing_dat[num_data:(num_data + training_size),]
train_input <- housing_dat[1:training_size,]
test_input <- housing_dat[(training_size + 1):(training_size + testing_size),]
model_nnet <- nnet(x=train_input[,1:6], hidden = 10,
y=train[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet <- nnet(x=train_input[,1:6], hidden = 10,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
library(nnet)
library(neuralnet)
# library(clusterSim)
### Read in Result Data ###
results_N <- read.table("Results/results_normal.txt")
results_HF <- read.table("Results/results_hf.txt")
distro_N <- read.table("Results/distro_normal.txt")
distro_HF <- read.table("Results/distro_HF.txt")
features <- do.call(rbind, list(results_N,results_HF))
distroMatrix <- do.call(cbind, list(distro_N,distro_HF))
x <- distroMatrix
x <- t(x)
# x <- x1[sample(1:nrow(x1)),]
y <- features
#y <- t(y)
### Get # of runs to handle variable sample size ###
combinedSize <- dim(y)[1]
numRuns <- combinedSize / 2 # Divide By 2 b/c y has normal and HF
trainingSize <- (numRuns - numRuns * .2)
testSize <- (numRuns - numRuns * .8)
# Create training and testing data (Note that the data is in random order)
# Usually the taining set is 2/3 and the testing set is 1/3
HF_Start <- numRuns + 1
# train_input <- rbind(x[1:400,],x[501:900,])
# test_input <- rbind(x[401:500,],x[901:1000,])
train_input <- x[HF_Start:(numRuns + trainingSize),]
test_input <- x[(HF_Start + trainingSize):combinedSize,]
# train_output <- rbind(y[1:400,],y[501:900,])
# test_output <- rbind(y[401:500,],y[901:1000,])
train_output <- y[HF_Start:(numRuns + trainingSize),]
test_output <- y[(HF_Start + trainingSize):combinedSize,]
training <- cbind(train_input, train_output)
train <- training[sample(nrow(training)),]
#train <- normalize(train)
testing <- cbind(test_input, test_output)
test <- testing[sample(nrow(testing)),]
reduced_x <- subset(x,select = c('V6', 'V7','V8', 'V10', 'V11', 'V14', 'V15', 'V16'))
reduced_output <- subset(test_output,select = c('V6', 'V7','V8', 'V10', 'V11', 'V14', 'V15', 'V16'))
# Build your Artificial Neural Network Model
model_nnet <- nnet(x=train[,11:26], hidden = 1000000000000000,
y=train[,1:10], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
# file:
# Contributers: William Hammond
#               Harry Longwell
# Created: 11/19/2015
# Modified: 11/19/2015
library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.10:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.10:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.10:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.10:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.10:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.10:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
names <- c('ratio_foreclose', 'inventory_measure','price_to_rent','sold_for_gain',
'increasing_in_value', 'pct_price_reduced','median_sold_price' )
housing_dat = as.data.frame(cbind(ratio_foreclose, inventory_measure,price_to_rent,
sold_for_gain,increasing_in_value,pct_price_reduced,median_sold_price))
colnames(housing_dat) <- names
# Get the number of data point so we can split training and testing data
num_data <- dim(median_sold_price)[1]
training_size <- num_data * 0.8
testing_size <- num_data * 0.2
train_input <- housing_dat[num_data:(num_data + training_size),]
train_input <- housing_dat[1:training_size,]
test_input <- housing_dat[(training_size + 1):(training_size + testing_size),]
train_input[,1:6].
train_input[,1:6]
model_nnet <- nnet(x=train_input[,1:6], hidden = 10,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
traceback()
train_input[,7]
as.data.frame(train_input[,7])
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000,
y=as.data.frame(train_input[,7]), size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
options(warn = 2)
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
traceback()
debug(nnet)
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
train_input[,1:6]
complete.cases(train_input)
train_input[complete.cases(train_input),]
# file:
# Contributers: William Hammond
#               Harry Longwell
# Created: 11/19/2015
# Modified: 11/19/2015
library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.10:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.10:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.10:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.10:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.10:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.10:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
names <- c('ratio_foreclose', 'inventory_measure','price_to_rent','sold_for_gain',
'increasing_in_value', 'pct_price_reduced','median_sold_price' )
housing_dat = as.data.frame(cbind(ratio_foreclose, inventory_measure,price_to_rent,
sold_for_gain,increasing_in_value,pct_price_reduced,median_sold_price))
colnames(housing_dat) <- names
# Get the number of data point so we can split training and testing data
num_data <- dim(median_sold_price)[1]
training_size <- num_data * 0.8
testing_size <- num_data * 0.2
train_input <- housing_dat[num_data:(num_data + training_size),]
# Get first 80% of the data set to train on
train_input <- housing_dat[1:training_size,]
# Get the last 20% of the data set to test on
test_input <- housing_dat[(training_size + 1):(training_size + testing_size),]
# Remove any row that has an NA in it
train_input <- train_input[complete.cases(train_input),]
test_input <- test_input[complete.cases(test_input),]
model_nnet <- nnet(x=train_input[,1:6], hidden = 10,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
options(warn=0)
undebug(nnet)
# file:
# Contributers: William Hammond
#               Harry Longwell
# Created: 11/19/2015
# Modified: 11/19/2015
library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.10:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.10:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.10:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.10:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.10:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.10:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
names <- c('ratio_foreclose', 'inventory_measure','price_to_rent','sold_for_gain',
'increasing_in_value', 'pct_price_reduced','median_sold_price' )
housing_dat = as.data.frame(cbind(ratio_foreclose, inventory_measure,price_to_rent,
sold_for_gain,increasing_in_value,pct_price_reduced,median_sold_price))
colnames(housing_dat) <- names
# Get the number of data point so we can split training and testing data
num_data <- dim(median_sold_price)[1]
training_size <- num_data * 0.8
testing_size <- num_data * 0.2
train_input <- housing_dat[num_data:(num_data + training_size),]
# Get first 80% of the data set to train on
train_input <- housing_dat[1:training_size,]
# Get the last 20% of the data set to test on
test_input <- housing_dat[(training_size + 1):(training_size + testing_size),]
# Remove any row that has an NA in it
train_input <- train_input[complete.cases(train_input),]
test_input <- test_input[complete.cases(test_input),]
model_nnet <- nnet(x=train_input[,1:6], hidden = 10,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet <- nnet(x=train_input[,1:6], hidden = 2,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000000000,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
?nnet
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced
# file:
# Contributers: William Hammond
#               Harry Longwell
# Created: 11/19/2015
# Modified: 11/19/2015
library(nnet)
library(neuralnet)
data_path <- '../data/'
## Load in response variables
sold_for_gain <- read.csv( file = paste(data_path, 'County_PctOfHomesSellingForGain_AllHomes.csv', sep = ''))
sold_for_gain <- sold_for_gain[sold_for_gain$Metro == 'Rochester',]
sold_for_gain <- t(subset(sold_for_gain, select = X2010.10:X2015.09))
increasing_in_value <- read.csv ( file = paste(data_path, 'County_PctOfHomesIncreasingInValues_AllHomes.csv', sep =''))
increasing_in_value <- increasing_in_value[increasing_in_value$Metro == 'Rochester',]
increasing_in_value <- increasing_in_value[increasing_in_value$RegionName == 'Monroe',]
increasing_in_value <- t(subset(increasing_in_value, select = X2010.09:X2015.09))
pct_price_reduced <-read.csv ( file = paste(data_path, 'County_PctOfListingsWithPriceReductions_AllHomes.csv', sep = ''))
pct_price_reduced <- pct_price_reduced[pct_price_reduced$RegionName == 'Monroe',]
pct_price_reduced <- pct_price_reduced[pct_price_reduced$State == 'NY',]
pct_price_reduced <- t(subset(pct_price_reduced, select = X2010.09:X2015.09))
median_pct_price_reduced <-read.csv ( file = paste(data_path, 'County_MedianPctOfPriceReduction_AllHomes.csv', sep = ''))
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$RegionName == 'Monroe',]
median_pct_price_reduced <- median_pct_price_reduced[median_pct_price_reduced$State == 'NY',]
median_pct_price_reduced <- t(subset(median_pct_price_reduced, select = X2010.09:X2015.09))
ratio_foreclose <- read.csv ( file = paste(data_path, 'County_HomesSoldAsForeclosures-Ratio_AllHomes.csv', sep = ''))
ratio_foreclose <- ratio_foreclose [ratio_foreclose$RegionName == 'Monroe',]
ratio_foreclose <- ratio_foreclose [ratio_foreclose$Metro == 'Rochester',]
ratio_foreclose <- t(subset(ratio_foreclose, select = X2010.09:X2015.09))
inventory_measure <- read.csv ( file = paste(data_path, 'InventoryMeasure_County_Public.csv', sep = ''))
inventory_measure <- inventory_measure [inventory_measure$CountyName == 'Monroe',]
inventory_measure <- inventory_measure [inventory_measure$Metro == 'Rochester',]
inventory_measure <- t(subset(inventory_measure, select = X2010.09:X2015.09))
price_to_rent = read.csv(file = paste(data_path, 'County_PriceToRentRatio_AllHomes.csv', sep = ''))
price_to_rent <- price_to_rent[price_to_rent$RegionName == 'Monroe',]
price_to_rent <- price_to_rent[price_to_rent$State == 'NY',]
price_to_rent <- t(subset(price_to_rent, select = X2010.09:X2015.09))
# Target Variable
median_sold_price <- read.csv( file = paste(data_path, 'County_MedianSoldPrice_AllHomes.csv', sep = ''))
median_sold_price <- median_sold_price[median_sold_price$Metro == 'Rochester',]
median_sold_price <- median_sold_price[median_sold_price$RegionName == 'Monroe',]
median_sold_price <- t(subset(median_sold_price, select = X2010.10:X2015.09))
names <- c('ratio_foreclose', 'inventory_measure','price_to_rent','sold_for_gain',
'increasing_in_value', 'pct_price_reduced','median_sold_price' )
housing_dat = as.data.frame(cbind(ratio_foreclose, inventory_measure,price_to_rent,
sold_for_gain,increasing_in_value,pct_price_reduced,median_sold_price))
colnames(housing_dat) <- names
# Get the number of data point so we can split training and testing data
num_data <- dim(median_sold_price)[1]
training_size <- num_data * 0.8
testing_size <- num_data * 0.2
train_input <- housing_dat[num_data:(num_data + training_size),]
# Get first 80% of the data set to train on
train_input <- housing_dat[1:training_size,]
# Get the last 20% of the data set to test on
test_input <- housing_dat[(training_size + 1):(training_size + testing_size),]
# Remove any row that has an NA in it
train_input <- train_input[complete.cases(train_input),]
test_input <- test_input[complete.cases(test_input),]
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000000000,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000000000,
y=train_input[,7], size=35,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet.wts
model_nnet
model_nnet <- nnet(x=train_input[,1:6], hidden = 1000000000,
y=train_input[,7], size=6,maxit = 10000, linout = TRUE,
trace = TRUE)
model_nnet
model_nnet$value
predicted=predict(model_nnet, test_output, type = "raw")
accuracy=((predicted-test_input)/test_input)*100
test_input
predicted=predict(model_nnet, test_input, type = "raw")
accuracy=((predicted-test_input)/test_input)*100
accuracy
>predict
?predict
?nnet.predict
